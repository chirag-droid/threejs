/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';

import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';

type GLTFResult = GLTF & {
  nodes: {
    Cube008: THREE.Mesh;
    Cube008_1: THREE.Mesh;
    Cube008_2: THREE.Mesh;
    keyboard: THREE.Mesh;
    Cube002: THREE.Mesh;
    touchbar: THREE.Mesh;
    Cube002_1: THREE.Mesh;
  };
  materials: {
    ['matte.001']: THREE.MeshStandardMaterial;
    ['screen.001']: THREE.MeshStandardMaterial;
    keys: THREE.MeshStandardMaterial;
    trackpad: THREE.MeshStandardMaterial;
    touchbar: THREE.MeshStandardMaterial;
  };
};

export default function Macbook(props: JSX.IntrinsicElements['group']) {
  const group = useRef<JSX.IntrinsicElements['group']>(null);

  const { nodes, materials } = useGLTF(
    './macbook.glb'
  ) as unknown as GLTFResult;

  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    if (group.current !== null && group.current.setRotationFromEuler) {
      group.current.setRotationFromEuler(
        new THREE.Euler(
          Math.cos(t / 4) / 8,
          (1 + Math.sin(t / 1.5)) / 10,
          -0.2 - (1 + Math.sin(t / 1.5)) / 20
        )
      );
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, -0.04, 0.41]} rotation={[0.01, 0, 0]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            geometry={nodes.Cube008.geometry}
            material={nodes.Cube008.material}
          />
          <mesh
            geometry={nodes.Cube008_1.geometry}
            material={materials['matte.001']}
          />
          <mesh
            geometry={nodes.Cube008_2.geometry}
            material={materials['screen.001']}
          />
        </group>
      </group>
      <mesh
        geometry={nodes.keyboard.geometry}
        material={materials.keys}
        position={[1.79, 0, 3.45]}
      />
      <group position={[0, -0.1, 3.39]}>
        <mesh
          geometry={nodes.Cube002.geometry}
          material={nodes.Cube002.material}
        />
        <mesh
          geometry={nodes.Cube002_1.geometry}
          material={materials.trackpad}
        />
      </group>
      <mesh
        geometry={nodes.touchbar.geometry}
        material={materials.touchbar}
        position={[0, -0.03, 1.2]}
      />
    </group>
  );
}

useGLTF.preload('./macbook.glb');
